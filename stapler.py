
# stapler.py -i/--input -r/--reference  -t/--threads    -o/--output -f/--format

import argparse
from process import process_sra, process_reference_genome
from mapper import execute_minimap2
from generate_output import generate_output

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Stapler program")
    parser.add_argument('-s', '--input', help='Input genome file (generated by seqtk)')
    parser.add_argument('-f', '--format', help='Output format (1, 2, or 3)')
    parser.add_argument('-o', '--output', help='Output prefix')
    parser.add_argument('-r', '--reference', help='Reference genome file')
    parser.add_argument('-t', '--threads', type=int, help='Number of threads')
    args = parser.parse_args()

    # Process the input based on the provided arguments
    if args.input:
        sra_result = process_sra(args.input)
        if not sra_result:
            print("Error processing SRA.")
            return
    else:
        print("Please provide -s/--input argument.")
        return

    # Process the reference genome
    if args.reference:
        process_reference_genome(args.reference)
    else:
        print("Please provide -r/--reference argument.")
        return

    # Execute minimap2
    if args.reference and sra_result and args.threads:
        execute_minimap2(args.reference, sra_result.fasta_file_path, args.threads)
    else:
        print("Please provide -r/--reference, -s/--input, -t/--threads arguments.")

    # Generate the output file
    if args.output and args.format:
        generate_output(args.output, args.format)
    else:
        print("Please provide both -f/--format and -o/--output arguments.")

if __name__ == '__main__':
    main()
